// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using RizSoft.Acme.Domain.Models;

#nullable disable

namespace RizSoft.Acme.Services
{
    public partial class AcmeContext : DbContext
    {
        public AcmeContext(DbContextOptions<AcmeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<TagsProduct> TagsProducts { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.CostingMethod)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("L=LIFO, F=FIFO");

                entity.Property(e => e.DataSheetUrl)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ListPrice).HasColumnType("money");

                entity.Property(e => e.LongDescription)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.OnMarketSince).HasColumnType("date");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductType).HasComment("0=Product, 1=Service, 2=Digital");

                entity.Property(e => e.RowGuid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RowTimestamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Products_Categories");
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.Property(e => e.Tag1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Tag");
            });

            modelBuilder.Entity<TagsProduct>(entity =>
            {
                entity.HasKey(e => new { e.IdTag, e.IdProduct });

                entity.HasOne(d => d.IdProductNavigation)
                    .WithMany(p => p.TagsProducts)
                    .HasForeignKey(d => d.IdProduct)
                    .HasConstraintName("FK_TagsProducts_Products");

                entity.HasOne(d => d.IdTagNavigation)
                    .WithMany(p => p.TagsProducts)
                    .HasForeignKey(d => d.IdTag)
                    .HasConstraintName("FK_TagsProducts_Tags");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}